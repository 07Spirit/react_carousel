{"version":3,"sources":["components/ImagesInfo.tsx","components/ImagesList.tsx","components/Carousel.tsx","App.tsx","index.tsx"],"names":["ImagesInfo","image","pass","key","src","alt","style","width","itemWidth","ImagesList","images","map","Carousel","state","props","moveAfterPunch","buttonPrev","frameSize","step","infinite","lastPlace","length","Math","abs","setState","buttonNext","handleEventClick","event","mark","currentTarget","value","animationDuration","eventFocus","toString","eventBlur","undefined","this","className","transform","transitionDuration","type","onClick","htmlFor","min","max","placeholder","onChange","onFocus","onBlur","id","defaultValue","elem","checked","React","Component","App","ReactDOM","render","document","getElementById"],"mappings":"gQAAaA,EAIR,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,KAAMC,EAAhB,EAAgBA,IAAhB,OACH,mCACE,6BACE,qBACEC,IAAKH,EACLI,IAAG,UAAKJ,GACRK,MAAO,CACLC,MAAM,GAAD,OAAKL,EAAKM,UAAV,UALFL,MCJAM,EAGR,SAAC,GAAD,IAAGC,EAAH,EAAGA,OAAQR,EAAX,EAAWA,KAAX,OACH,mCAEIQ,EAAOC,KAAI,SAACV,GAAD,OACT,cAAC,EAAD,CAAYA,MAAOA,EAAOC,KAAMA,GAAWD,SCO7CW,E,4MACJC,M,2BACK,EAAKC,O,IACRC,eAAgB,I,EAGlBC,WAAa,WACX,MAOI,EAAKH,MANPH,EADF,EACEA,OACAK,EAFF,EAEEA,eAFF,IAGEP,iBAHF,MAGc,EAHd,MAIES,iBAJF,MAIc,EAJd,MAKEC,YALF,MAKS,EALT,EAMEC,EANF,EAMEA,SAIIC,EAAYV,EAAOW,OAASb,EAAYS,EAAYT,EACtCc,KAAKC,IAAIR,GAAkBP,GAC1CU,GAAQR,EAAOW,OAASJ,EAG3B,EAAKO,SAAS,CACZT,eAAgBA,EAAiBG,EAAOV,IAEjCO,EATQ,EAUjB,EAAKS,SAAS,CACZT,eAXe,IAaRI,GACT,EAAKK,SAAS,CACZT,gBAAkBK,K,EAKxBK,WAAa,WACX,MAOI,EAAKZ,MANPH,EADF,EACEA,OACAK,EAFF,EAEEA,eAFF,IAGEP,iBAHF,MAGc,EAHd,MAIES,iBAJF,MAIc,EAJd,MAKEC,YALF,MAKS,EALT,EAMEC,EANF,EAMEA,SAGIC,EAAYV,EAAOW,OAASb,EAAYS,EAAYT,EACtCc,KAAKC,IAAIR,GAC1BK,EAAYZ,GAAcU,GAAQR,EAAOW,OAASJ,EAGnD,EAAKO,SAAS,CACZT,eAAgBA,EAAiBG,EAAOV,IAEjCc,KAAKC,IAAIR,GAAkBK,EACpC,EAAKI,SAAS,CACZT,gBAAkBK,IAEXD,GACT,EAAKK,SAAS,CACZT,eAfe,K,EAoBrBW,iBAAmB,SAACC,EAClBC,GACA,OAAQA,GACN,IAAK,OACH,EAAKJ,SAAS,CAAEN,MAAOS,EAAME,cAAcC,QAC3C,MAEF,IAAK,YACH,EAAKN,SAAS,CAAEhB,WAAYmB,EAAME,cAAcC,QAChD,MAEF,IAAK,YACH,EAAKN,SAAS,CAAEP,WAAYU,EAAME,cAAcC,QAChD,MAEF,IAAK,oBACH,EAAKN,SAAS,CAAEO,mBAAoBJ,EAAME,cAAcC,U,EAQ9DE,WAAa,SAACL,EACZC,GACIA,IAEFD,EAAME,cAAcC,MAAQF,EAAKK,a,EAIrCC,UAAY,WACV,EAAKV,SAAS,CAAEN,UAAMiB,K,4CAGxB,WAA2B,IAAD,OACxB,EAOIC,KAAKvB,MANPK,EADF,EACEA,KACAR,EAFF,EAEEA,OACAF,EAHF,EAGEA,UACAS,EAJF,EAIEA,UACAc,EALF,EAKEA,kBACAhB,EANF,EAMEA,eAGF,OACE,sBAAKsB,UAAU,WAAf,UACE,yBACEA,UAAU,gBACV/B,MAAO,CACLC,MAAOC,EAAYS,GAHvB,SAME,oBACEoB,UAAU,iBACV/B,MAAO,CACLgC,UAAU,cAAD,OAAgBvB,EAAhB,OACTwB,mBAAmB,GAAD,OAAKR,EAAL,OAJtB,SAOE,cAAC,EAAD,CAAYrB,OAAQA,EAAQR,KAAMkC,KAAKvB,YAG3C,0BAASwB,UAAU,gBAAnB,UACE,sBAAKA,UAAU,iBAAf,UACE,wBACEG,KAAK,SACLH,UAAU,gBACV,UAAQ,OACRP,MAAM,OACNW,QAASL,KAAKpB,WALhB,kBASA,wBACEwB,KAAK,SACLH,UAAU,gBACV,UAAQ,OACRP,MAAM,OACNW,QAASL,KAAKX,WALhB,qBAUF,sBAAKY,UAAU,iBAAf,UACE,wBAAOK,QAAQ,OAAf,UACG,SACD,uBACEF,KAAK,SACLH,UAAU,aACVM,IAAK,EACLC,IAAKlC,EAAOW,OACZwB,YAAW,UAAK3B,GAChBY,MAAOZ,EACP4B,SAAW,SAAAnB,GACT,EAAKD,iBAAiBC,EAAO,SAE/BoB,QAAS,SAACpB,GACR,EAAKK,WAAWL,EAAOT,IAEzB8B,OAAQZ,KAAKF,eAIjB,uBACEM,KAAK,QACLS,GAAG,OACHN,IAAK,EACLC,IAAKlC,EAAOW,OACZyB,SAAW,SAAAnB,GACT,EAAKD,iBAAiBC,EAAO,SAE/BuB,aAAchC,OAGlB,sBAAKmB,UAAU,wBAAf,UACE,wBAAOK,QAAQ,aAAf,UACG,eACD,uBACEF,KAAK,SACLH,UAAU,aACVM,IAAK,IACLzB,KAAM,EACN0B,IAAK,IACLC,YAAW,UAAKrC,GAChBsB,MAAOtB,EACPsC,SAAW,SAAAnB,GACT,EAAKD,iBAAiBC,EAAO,cAE/BoB,QAAS,SAACpB,GACR,EAAKK,WAAWL,EAAOnB,IAEzBwC,OAAQZ,KAAKF,eAGjB,uBACEM,KAAK,QACLS,GAAG,aACHN,IAAK,IACLzB,KAAM,EACN0B,IAAK,IACLE,SAAW,SAAAnB,GACT,EAAKD,iBAAiBC,EAAO,cAE/BuB,aAAc1C,OAGlB,sBAAK6B,UAAU,sBAAf,UACE,wBAAOK,QAAQ,aAAf,UACG,eACD,uBACEF,KAAK,SACLH,UAAU,aACVM,IAAK,EACLC,IAAKpC,EAAYE,EAAOW,OACxBwB,YAAW,UAAK5B,GAChBa,MAAOb,EACP6B,SAAW,SAAAnB,GACT,EAAKD,iBAAiBC,EAAO,cAE/BoB,QAAS,SAACpB,GACR,EAAKK,WAAWL,EAAOV,IAEzB+B,OAAQZ,KAAKF,eAIjB,uBACEM,KAAK,QACLS,GAAG,aACHN,IAAK,EACLC,IAAKlC,EAAOW,OACZyB,SAAW,SAAAnB,GACT,EAAKD,iBAAiBC,EAAO,cAE/BuB,aAAcjC,OAGlB,sBAAKoB,UAAU,8BAAf,UACE,wBAAOK,QAAQ,oBAAf,UACG,uBACD,uBACEF,KAAK,SACLH,UAAU,aACVM,IAAK,EACLzB,KAAM,IACN0B,IAAK,IACLC,YAAW,UAAKd,GAChBD,MAAOC,EACPe,SAAW,SAAAnB,GACT,EAAKD,iBAAiBC,EAAO,sBAE/BoB,QAAS,SAACpB,GACR,EAAKK,WAAWL,EAAOI,IAEzBiB,OAAQZ,KAAKF,eAIjB,uBACEM,KAAK,QACLS,GAAG,oBACHN,IAAK,EACLzB,KAAM,IACN0B,IAAK,IACLE,SAAW,SAAAnB,GACT,EAAKD,iBAAiBC,EAAO,sBAE/BuB,aAAcnB,OAGlB,sBAAKM,UAAU,qBAAf,UACE,uBAAOK,QAAQ,WAAf,SAA2B,eAC3B,uBACEF,KAAK,WACLS,GAAG,WACHR,QAAS,SAACU,GAAD,OAAU,EAChB3B,SAAS,CAAEL,SAAUgC,EAAKtB,cAAcuB,0B,GA3RlCC,IAAMC,WAoSd1C,ICvST2C,E,4MACJ1C,MAAQ,CACNH,OAAQ,CACN,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,gBAEFF,UAAW,IACXS,UAAW,EACXC,KAAM,EACNa,kBAAmB,IACnBZ,UAAU,G,4CAGZ,WACE,MAEIiB,KAAKvB,MADPH,EADF,EACEA,OAAQF,EADV,EACUA,UAAWS,EADrB,EACqBA,UAAWC,EADhC,EACgCA,KAAMa,EADtC,EACsCA,kBAAmBZ,EADzD,EACyDA,SAGzD,OACE,sBAAKkB,UAAU,MAAf,UACE,oBAAI,UAAQ,QAAZ,iCAAsC3B,EAAOW,OAA7C,aAEA,cAAC,EAAD,CACEX,OAAQA,EACRQ,KAAMA,EACND,UAAWA,EACXT,UAAWA,EACXuB,kBAAmBA,EACnBZ,SAAUA,W,GApCFkC,IAAMC,WA2CTC,ICrDfC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.f77049d9.chunk.js","sourcesContent":["export const ImagesInfo: React.FC <{\n  image: string;\n  pass: { itemWidth: number };\n  key: React.Key;\n}> = ({ image, pass, key }) => (\n  <>\n    <li key={key}>\n      <img\n        src={image}\n        alt={`${image}`}\n        style={{\n          width: `${pass.itemWidth}px`,\n        }}\n      />\n    </li>\n  </>\n);\n","import { ImagesInfo } from './ImagesInfo';\n\nexport const ImagesList: React.FC <{\n  images: string[];\n  pass: { itemWidth: number };\n}> = ({ images, pass }) => (\n  <>\n    {\n      images.map((image) => (\n        <ImagesInfo image={image} pass={pass} key={image} />\n      ))\n    }\n  </>\n);\n","import React from 'react';\nimport './styles/Carousel.scss';\nimport { ImagesList } from './ImagesList';\nimport { Props } from '../types/Props';\n\ninterface State extends Props{\n  moveAfterPunch: number;\n}\n\ntype InputHandler = {\n  step: 'step',\n  itemWidth: 'itemWidth',\n  frameSize: 'frameSize',\n  animationDuration: 'animationDuration',\n};\n\nclass Carousel extends React.Component<Props, State> {\n  state = {\n    ...this.props,\n    moveAfterPunch: 0,\n  };\n\n  buttonPrev = () => {\n    const {\n      images,\n      moveAfterPunch,\n      itemWidth = 0,\n      frameSize = 0,\n      step = 0,\n      infinite,\n    } = this.state;\n\n    const firstPlace = 0;\n    const lastPlace = images.length * itemWidth - frameSize * itemWidth;\n    const prevResolve = Math.abs(moveAfterPunch) > itemWidth\n      && step <= images.length - frameSize;\n\n    if (prevResolve) {\n      this.setState({\n        moveAfterPunch: moveAfterPunch + step * itemWidth,\n      });\n    } else if (moveAfterPunch < firstPlace) {\n      this.setState({\n        moveAfterPunch: firstPlace,\n      });\n    } else if (infinite) {\n      this.setState({\n        moveAfterPunch: -(lastPlace),\n      });\n    }\n  };\n\n  buttonNext = () => {\n    const {\n      images,\n      moveAfterPunch,\n      itemWidth = 0,\n      frameSize = 0,\n      step = 0,\n      infinite,\n    } = this.state;\n    const firstPlace = 0;\n    const lastPlace = images.length * itemWidth - frameSize * itemWidth;\n    const nextResolve = Math.abs(moveAfterPunch)\n    < (lastPlace - itemWidth) && step <= images.length - frameSize;\n\n    if (nextResolve) {\n      this.setState({\n        moveAfterPunch: moveAfterPunch - step * itemWidth,\n      });\n    } else if (Math.abs(moveAfterPunch) < lastPlace) {\n      this.setState({\n        moveAfterPunch: -(lastPlace),\n      });\n    } else if (infinite) {\n      this.setState({\n        moveAfterPunch: firstPlace,\n      });\n    }\n  };\n\n  handleEventClick = (event: React.ChangeEvent<HTMLInputElement>,\n    mark: keyof InputHandler) => {\n    switch (mark) {\n      case 'step':\n        this.setState({ step: +event.currentTarget.value });\n        break;\n\n      case 'itemWidth':\n        this.setState({ itemWidth: +event.currentTarget.value });\n        break;\n\n      case 'frameSize':\n        this.setState({ frameSize: +event.currentTarget.value });\n        break;\n\n      case 'animationDuration':\n        this.setState({ animationDuration: +event.currentTarget.value });\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  eventFocus = (event: React.FocusEvent<HTMLInputElement, Element>,\n    mark: number | undefined) => {\n    if (mark) {\n      // eslint-disable-next-line no-param-reassign\n      event.currentTarget.value = mark.toString();\n    }\n  };\n\n  eventBlur = () => {\n    this.setState({ step: undefined });\n  };\n\n  render(): React.ReactNode {\n    const {\n      step,\n      images,\n      itemWidth,\n      frameSize,\n      animationDuration,\n      moveAfterPunch,\n    } = this.state;\n\n    return (\n      <div className=\"Carousel\">\n        <section\n          className=\"container_one\"\n          style={{\n            width: itemWidth * frameSize,\n          }}\n        >\n          <ul\n            className=\"Carousel__list\"\n            style={{\n              transform: `translateX(${moveAfterPunch}px)`,\n              transitionDuration: `${animationDuration}ms`,\n            }}\n          >\n            <ImagesList images={images} pass={this.state} />\n          </ul>\n        </section>\n        <section className=\"container_two\">\n          <div className=\"Carousel__move\">\n            <button\n              type=\"button\"\n              className=\"ButtonElement\"\n              data-cy=\"Prev\"\n              value=\"Prev\"\n              onClick={this.buttonPrev}\n            >\n              Prev\n            </button>\n            <button\n              type=\"button\"\n              className=\"ButtonElement\"\n              data-cy=\"Next\"\n              value=\"Next\"\n              onClick={this.buttonNext}\n            >\n              Next\n            </button>\n          </div>\n          <div className=\"Carousel__step\">\n            <label htmlFor=\"step\">\n              {'Step: '}\n              <input\n                type=\"number\"\n                className=\"inputBlock\"\n                min={1}\n                max={images.length}\n                placeholder={`${step}`}\n                value={step}\n                onChange={(event => {\n                  this.handleEventClick(event, 'step');\n                })}\n                onFocus={(event) => {\n                  this.eventFocus(event, step);\n                }}\n                onBlur={this.eventBlur}\n              />\n            </label>\n\n            <input\n              type=\"range\"\n              id=\"step\"\n              min={1}\n              max={images.length}\n              onChange={(event => {\n                this.handleEventClick(event, 'step');\n              })}\n              defaultValue={step}\n            />\n          </div>\n          <div className=\"Carousel__image_width\">\n            <label htmlFor=\"image_size\">\n              {'Image Size: '}\n              <input\n                type=\"number\"\n                className=\"inputBlock\"\n                min={130}\n                step={5}\n                max={370}\n                placeholder={`${itemWidth}`}\n                value={itemWidth}\n                onChange={(event => {\n                  this.handleEventClick(event, 'itemWidth');\n                })}\n                onFocus={(event) => {\n                  this.eventFocus(event, itemWidth);\n                }}\n                onBlur={this.eventBlur}\n              />\n            </label>\n            <input\n              type=\"range\"\n              id=\"image_size\"\n              min={130}\n              step={5}\n              max={370}\n              onChange={(event => {\n                this.handleEventClick(event, 'itemWidth');\n              })}\n              defaultValue={itemWidth}\n            />\n          </div>\n          <div className=\"Carousel__frameSize\">\n            <label htmlFor=\"frame_size\">\n              {'Frame Size: '}\n              <input\n                type=\"number\"\n                className=\"inputBlock\"\n                min={1}\n                max={itemWidth * images.length}\n                placeholder={`${frameSize}`}\n                value={frameSize}\n                onChange={(event => {\n                  this.handleEventClick(event, 'frameSize');\n                })}\n                onFocus={(event) => {\n                  this.eventFocus(event, frameSize);\n                }}\n                onBlur={this.eventBlur}\n              />\n            </label>\n\n            <input\n              type=\"range\"\n              id=\"frame_size\"\n              min={1}\n              max={images.length}\n              onChange={(event => {\n                this.handleEventClick(event, 'frameSize');\n              })}\n              defaultValue={frameSize}\n            />\n          </div>\n          <div className=\"Carousel__animationDuration\">\n            <label htmlFor=\"animationDuration\">\n              {'Animation duration: '}\n              <input\n                type=\"number\"\n                className=\"inputBlock\"\n                min={0}\n                step={200}\n                max={2000}\n                placeholder={`${animationDuration}`}\n                value={animationDuration}\n                onChange={(event => {\n                  this.handleEventClick(event, 'animationDuration');\n                })}\n                onFocus={(event) => {\n                  this.eventFocus(event, animationDuration);\n                }}\n                onBlur={this.eventBlur}\n              />\n            </label>\n\n            <input\n              type=\"range\"\n              id=\"animationDuration\"\n              min={0}\n              step={500}\n              max={2000}\n              onChange={(event => {\n                this.handleEventClick(event, 'animationDuration');\n              })}\n              defaultValue={animationDuration}\n            />\n          </div>\n          <div className=\"Carousel__infinite\">\n            <label htmlFor=\"infinite\">{'Infinite: '}</label>\n            <input\n              type=\"checkbox\"\n              id=\"infinite\"\n              onClick={(elem) => this\n                .setState({ infinite: elem.currentTarget.checked })}\n            />\n          </div>\n        </section>\n      </div>\n    );\n  }\n}\n\nexport default Carousel;\n","import React from 'react';\nimport './App.scss';\nimport Carousel from './components/Carousel';\n\ninterface State {\n  images: string[];\n  itemWidth: number;\n  frameSize: number;\n  step: number;\n  animationDuration: number;\n  infinite: boolean;\n}\n\nclass App extends React.Component<{}, State> {\n  state = {\n    images: [\n      './img/1.png',\n      './img/2.png',\n      './img/3.png',\n      './img/4.png',\n      './img/5.png',\n      './img/6.png',\n      './img/7.png',\n      './img/8.png',\n      './img/9.png',\n      './img/10.png',\n    ],\n    itemWidth: 130,\n    frameSize: 3,\n    step: 3,\n    animationDuration: 1000,\n    infinite: false,\n  };\n\n  render() {\n    const {\n      images, itemWidth, frameSize, step, animationDuration, infinite,\n    } = this.state;\n\n    return (\n      <div className=\"App\">\n        <h1 data-cy=\"title\">{`Carousel with ${images.length} images`}</h1>\n\n        <Carousel\n          images={images}\n          step={step}\n          frameSize={frameSize}\n          itemWidth={itemWidth}\n          animationDuration={animationDuration}\n          infinite={infinite}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}